name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Log in to AWS ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 975050230375.dkr.ecr.ap-south-1.amazonaws.com

      - name: Build Docker Image
        run: |
          docker build -t 975050230375.dkr.ecr.ap-south-1.amazonaws.com:latest .

      - name: Push Docker Image to ECR
        run: |
          docker tag 975050230375.dkr.ecr.ap-south-1.amazonaws.com:latest 975050230375.dkr.ecr.ap-south-1.amazonaws.com:latest
          docker push 975050230375.dkr.ecr.ap-south-1.amazonaws.com:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --force-new-deployment

  test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Run Integration Tests
        run: |
          # Your integration test commands here

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    needs: deploy
    steps:
      - name: Rollback Deployment
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --desired-count 0
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --desired-count 1
